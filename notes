                     REDUCE
                       const countOccurrences = function(arr, val){
               return arr.reduce((acc, elem) => {
                 return  (val === elem ? acc + 1 : acc)
               }, 0) 
           }

      
        
                     
                      //MODAL 
<Modal show={show} onHide={handleClose}>
        <Modal.Header closeButton>
          <Modal.Title>Return Book</Modal.Title>
        </Modal.Header>
        <Modal.Body>Did this facility send the book back? Please enter date and click save.</Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={handleClose}>
            Close
          </Button>
          <Button variant="primary" onClick={handleClose}>
            Save
          </Button>
        </Modal.Footer>
      </Modal>
//END MODAL
            
            //MODAL
        const [show, setShow] = useState(false);
        const handleClose = () => setShow(false);
        const handleShow = () => setShow(true);
        const saveReturn = () => {
            if (parcel.return === "" || parcel.parcelNumber === null || parcel.facilityId === "0" || parcel.genreId === 0 || parcel.title === ""){
                window.alert("Please fill in all fields.")
            }
            else if(parcelId){

                setIsLoading(true)

                updateParcel({
                 
                    dateSent: parcel.dateSent,
                    parcelNumber: parseInt(parcel.parcelNumber),
                    facilityId: parcel.facilityId,
                    genreId: parseInt(parcel.genreId),
                    title: parcel.title,
                    return: parcel.return,
                    returnDate:parcel.returnDate,
                    id: parcel.id
    
                })
                .then(getParcels)
            setShow(false)
        }
        //END MODAL
          
          
          DEBUGGING FILTER
            if(searchField !== "") {
            debugger
            const list = sortedParcels.filter(p => {
            //    console.log(searchField)
            //     console.log(p)
            //     console.log(p.title)
            //     console.log(p.title.toLowerCase())
            //     console.log(p.title.toLowerCase().includes(searchField))
               return p.title.toLowerCase().includes(searchField.toLowerCase())
            })
            setFiltered(list) 
        }
        else {
            setFiltered(sortedParcels)
        }
        },[searchField, sortedParcels])
 
 DELETED LIST CODE
 
            {/* {sortedParcels.map(p => { 
      
                let returned = p.return ? 'yes' : 'no'
                    return (
                <>
                 <tbody>
                 <tr>
                 <td>{p.parcelNumber}</td>
                 <td>{p.dateSent}</td>
                 <td>{p.facility?.state + "--" + p.facility?.name}</td>
                 <td>{p.genre?.name}</td>
                 <td>{p.title}</td>
                 <td>{returned}</td> */}
                 {/* <td>{p.returnDetails}</td> */}
                 {/* <td><button className="btn-edit-list" onClick={() => {
                    history.push(`/parcels/edit/${p.id}`)}}>Edit</button>
                    <button className="btn-return-list" onClick={() => {
                    history.push(`/parcels/return/${p.id}`)}}>Return</button></td>
                 </tr>
                 </tbody> */}
                 
    //             </>
    //   )}  
    //   )}



    
    

            
    //         </>
    //     )
    //   }












    // //   <Modal.Dialog>
    // //   <Modal.Header closeButton>
    // //     <Modal.Title>Modal title</Modal.Title>
    // //   </Modal.Header>
    
    // //   <Modal.Body>
    // //     <p>Modal body text goes here.</p>
    // //   </Modal.Body>
    
    // //   <Modal.Footer>
    // //     <Button variant="secondary">Close</Button>
    // //     <Button variant="primary">Save changes</Button>
    // //   </Modal.Footer>
    // // </Modal.Dialog>


      
//     }
//     else {
//     return (

//     <>
//     <section className="parcels-container">
//     <div className="div-header"></div>
//     {/* <section > */}
//     <div className="section-heading"><h4>Parcels</h4>
//     <div className="btn-header"><Button variant="info" size="sm" className="btn-add" onClick={toggleForm}>New Entry</Button>{' '}</div>
//     </div> 
//    <section className="table-parcels-list">
//     <Table striped bordered hover size="sm">
//   <thead>
//     <tr>
//       <th>#</th>
//       <th>Date</th>
//       <th>Destination</th>
//       <th>Genre</th>
//       <th>Title</th>
//       <th></th>
//     </tr>
//   </thead>
//   {sortedParcels.map(p => { 
      
//       return (
         
//         <tbody>
//         <tr>
//           <td>{p.parcelNumber}</td>
//           <td>{p.dateSent}</td>
//           <td>{p.facility?.name}</td>
//           <td>{p.genre?.name}</td>
//           <td>{p.title}</td>
//           <td><button onClick={() => {
//           history.push(`/parcels/edit/${p.id}`)}}>Edit</button></td>
//         </tr>
//         </tbody>
//       )}  
//       )}

    // </Table>
    // </section>
    // </section>

        // </>
        // )}




      
   

// onClick={() => {
//     history.push("/parcels/add")}}

{/* 
        {sortedParcels.map(p => { 
      
            return (
                <>
                <p>p.parcelNumber</p>
                <p>p.dateSent</p>
                <button   onClick={() => {
                    history.push(`/parcels/edit/${p.id}`)
              }}>Modify</button> 
                
                </>
            )}
      
    )} */}